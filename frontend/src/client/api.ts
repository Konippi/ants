/* tslint:disable */
/* eslint-disable */
/**
 * antsAPI
 * available methods list
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AllProjectResponse
 */
export interface AllProjectResponse {
    /**
     * 
     * @type {Array<ProjectWithUsers>}
     * @memberof AllProjectResponse
     */
    'projects'?: Array<ProjectWithUsers>;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ProjectRequestBody
 */
export interface ProjectRequestBody {
    /**
     * 
     * @type {string}
     * @memberof ProjectRequestBody
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ProjectRequestBody
     */
    'userIdList'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ProjectWithUsers
 */
export interface ProjectWithUsers {
    /**
     * 
     * @type {Project}
     * @memberof ProjectWithUsers
     */
    'project'?: Project;
    /**
     * 
     * @type {Array<UserModel>}
     * @memberof ProjectWithUsers
     */
    'users'?: Array<UserModel>;
}
/**
 * 
 * @export
 * @interface UserInfoModel
 */
export interface UserInfoModel {
    /**
     * 
     * @type {string}
     * @memberof UserInfoModel
     */
    'githubUrl'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserInfoModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserInfoModel
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfoModel
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserModel
     */
    'userId'?: number;
}
/**
 * 
 * @export
 * @interface UserRequestBody
 */
export interface UserRequestBody {
    /**
     * 
     * @type {string}
     * @memberof UserRequestBody
     */
    'githubUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestBody
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequestBody
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {Array<UserModel>}
     * @memberof UserResponse
     */
    'users'?: Array<UserModel>;
}

/**
 * ProjectControllerApi - axios parameter creator
 * @export
 */
export const ProjectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createProject
         * @param {ProjectRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectUsingPOST: async (requestBody: ProjectRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('createProjectUsingPOST', 'requestBody', requestBody)
            const localVarPath = `/api/v1/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteProject
         * @param {number} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectUsingDELETE: async (projectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProjectUsingDELETE', 'projectId', projectId)
            const localVarPath = `/api/v1/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary editProject
         * @param {number} projectId projectId
         * @param {ProjectRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProjectUsingPUT: async (projectId: number, requestBody: ProjectRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('editProjectUsingPUT', 'projectId', projectId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('editProjectUsingPUT', 'requestBody', requestBody)
            const localVarPath = `/api/v1/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllProjectsInLoginUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsInLoginUserUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectControllerApi - functional programming interface
 * @export
 */
export const ProjectControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createProject
         * @param {ProjectRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectUsingPOST(requestBody: ProjectRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectUsingPOST(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteProject
         * @param {number} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectUsingDELETE(projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectUsingDELETE(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary editProject
         * @param {number} projectId projectId
         * @param {ProjectRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editProjectUsingPUT(projectId: number, requestBody: ProjectRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editProjectUsingPUT(projectId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getAllProjectsInLoginUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectsInLoginUserUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectsInLoginUserUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectControllerApi - factory interface
 * @export
 */
export const ProjectControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary createProject
         * @param {ProjectRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectUsingPOST(requestBody: ProjectRequestBody, options?: any): AxiosPromise<void> {
            return localVarFp.createProjectUsingPOST(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteProject
         * @param {number} projectId projectId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectUsingDELETE(projectId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProjectUsingDELETE(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary editProject
         * @param {number} projectId projectId
         * @param {ProjectRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProjectUsingPUT(projectId: number, requestBody: ProjectRequestBody, options?: any): AxiosPromise<void> {
            return localVarFp.editProjectUsingPUT(projectId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllProjectsInLoginUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectsInLoginUserUsingGET(options?: any): AxiosPromise<AllProjectResponse> {
            return localVarFp.getAllProjectsInLoginUserUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectControllerApi - object-oriented interface
 * @export
 * @class ProjectControllerApi
 * @extends {BaseAPI}
 */
export class ProjectControllerApi extends BaseAPI {
    /**
     * 
     * @summary createProject
     * @param {ProjectRequestBody} requestBody requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public createProjectUsingPOST(requestBody: ProjectRequestBody, options?: AxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).createProjectUsingPOST(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteProject
     * @param {number} projectId projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public deleteProjectUsingDELETE(projectId: number, options?: AxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).deleteProjectUsingDELETE(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary editProject
     * @param {number} projectId projectId
     * @param {ProjectRequestBody} requestBody requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public editProjectUsingPUT(projectId: number, requestBody: ProjectRequestBody, options?: AxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).editProjectUsingPUT(projectId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllProjectsInLoginUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectControllerApi
     */
    public getAllProjectsInLoginUserUsingGET(options?: AxiosRequestConfig) {
        return ProjectControllerApiFp(this.configuration).getAllProjectsInLoginUserUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createUser
         * @param {UserRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST: async (requestBody: UserRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('createUserUsingPOST', 'requestBody', requestBody)
            const localVarPath = `/api/v1/user/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary editUser
         * @param {number} userId userId
         * @param {UserRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserUsingPUT: async (userId: number, requestBody: UserRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('editUserUsingPUT', 'userId', userId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('editUserUsingPUT', 'requestBody', requestBody)
            const localVarPath = `/api/v1/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getUserInfoByUserId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByUserIdUsingGET: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserInfoByUserIdUsingGET', 'userId', userId)
            const localVarPath = `/api/v1/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createUser
         * @param {UserRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsingPOST(requestBody: UserRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsingPOST(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary editUser
         * @param {number} userId userId
         * @param {UserRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editUserUsingPUT(userId: number, requestBody: UserRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editUserUsingPUT(userId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsersUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsersUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getUserInfoByUserId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoByUserIdUsingGET(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfoByUserIdUsingGET(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary createUser
         * @param {UserRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsingPOST(requestBody: UserRequestBody, options?: any): AxiosPromise<string> {
            return localVarFp.createUserUsingPOST(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary editUser
         * @param {number} userId userId
         * @param {UserRequestBody} requestBody requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUserUsingPUT(userId: number, requestBody: UserRequestBody, options?: any): AxiosPromise<string> {
            return localVarFp.editUserUsingPUT(userId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getAllUsers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsersUsingGET(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getAllUsersUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getUserInfoByUserId
         * @param {number} userId userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoByUserIdUsingGET(userId: number, options?: any): AxiosPromise<UserInfoModel> {
            return localVarFp.getUserInfoByUserIdUsingGET(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary createUser
     * @param {UserRequestBody} requestBody requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public createUserUsingPOST(requestBody: UserRequestBody, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).createUserUsingPOST(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary editUser
     * @param {number} userId userId
     * @param {UserRequestBody} requestBody requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public editUserUsingPUT(userId: number, requestBody: UserRequestBody, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).editUserUsingPUT(userId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getAllUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getAllUsersUsingGET(options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getAllUsersUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getUserInfoByUserId
     * @param {number} userId userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserInfoByUserIdUsingGET(userId: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserInfoByUserIdUsingGET(userId, options).then((request) => request(this.axios, this.basePath));
    }
}


